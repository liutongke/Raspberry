# docker config for srs.
# @see full.conf for detail config.

listen              1935;
max_connections     1000;
# For docker, please use docker logs to manage the logs of SRS.
# See https://docs.docker.com/config/containers/logging/
srs_log_tank        console;
daemon              off;
http_api {
    enabled         on;
    listen          1985;
}
http_server {
    enabled         on;
    listen          8080;
    dir             ./objs/nginx/html;
}
rtc_server {
    enabled on;
    listen 8000;
    # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#config-candidate
    candidate $CANDIDATE;
}
vhost __defaultVhost__ {
    #配置记录视频 按vhost/app和年月分目录，流名称、日和时间作为文件名
    dvr {
        enabled      on;
#         dvr_path     /usr/local/srs/video/[app]/[2006]/[01]/[stream]-[02]-[15].[04].[05].[999].mp4;#按vhost/app和年月分目录，流名称、日和时间作为文件名
        dvr_path     /usr/local/srs/video/[app]/[2006]/[01]/[stream]-[02]-[15].[04].[05].mp4;
        dvr_plan     segment;# DVR 计划，可以是 session（会话结束时重新编写 flv/mp4），或者是 segment（当 flv 时长超过指定的 dvr_duration 时重新编写）
        dvr_duration    3600; #DVR 文件时长，单位为秒，超过指定时长将重新编写
        dvr_wait_keyframe       on;# 是否等待关键帧才重新编写 segment，如果关闭，则超过时长就重新编写，如果开启，则等待关键帧后再重新编写
    }
    #降低延时配置
    tcp_nodelay     on;
    min_latency     on;
    play {
        #on就会马上播放，off就低延迟
        gop_cache       off;
        queue_length    10;
        mw_latency      100;
    }
    publish {
        mr off;
    }

    hls {
        enabled         on;
        hls_path        ./objs/nginx/html;
        hls_fragment    2;
        hls_window      60;
    }
    http_remux {
        enabled     on;
        mount       [vhost]/[app]/[stream].flv;
    }
    rtc {
        enabled     on;
        # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#rtmp-to-rtc
        rtmp_to_rtc on;
        # @see https://ossrs.net/lts/zh-cn/docs/v4/doc/webrtc#rtc-to-rtmp
        rtc_to_rtmp on;
    }
}

